package model.mwgl.eo;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 29 23:17:27 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AddressesEOImpl extends EntityImpl {

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AddressId {
            public Object get(AddressesEOImpl obj) {
                return obj.getAddressId();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAddressId((DBSequence)value);
            }
        }
        ,
        Address1 {
            public Object get(AddressesEOImpl obj) {
                return obj.getAddress1();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAddress1((String)value);
            }
        }
        ,
        Address2 {
            public Object get(AddressesEOImpl obj) {
                return obj.getAddress2();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAddress2((String)value);
            }
        }
        ,
        City {
            public Object get(AddressesEOImpl obj) {
                return obj.getCity();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setCity((String)value);
            }
        }
        ,
        PostalCode {
            public Object get(AddressesEOImpl obj) {
                return obj.getPostalCode();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setPostalCode((String)value);
            }
        }
        ,
        StateProvince {
            public Object get(AddressesEOImpl obj) {
                return obj.getStateProvince();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setStateProvince((String)value);
            }
        }
        ,
        CountryId {
            public Object get(AddressesEOImpl obj) {
                return obj.getCountryId();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setCountryId((String)value);
            }
        }
        ,
        Longitude {
            public Object get(AddressesEOImpl obj) {
                return obj.getLongitude();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setLongitude((Number)value);
            }
        }
        ,
        Latitude {
            public Object get(AddressesEOImpl obj) {
                return obj.getLatitude();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setLatitude((Number)value);
            }
        }
        ,
        CreatedBy {
            public Object get(AddressesEOImpl obj) {
                return obj.getCreatedBy();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CreationDate {
            public Object get(AddressesEOImpl obj) {
                return obj.getCreationDate();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdatedBy {
            public Object get(AddressesEOImpl obj) {
                return obj.getLastUpdatedBy();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LastUpdateDate {
            public Object get(AddressesEOImpl obj) {
                return obj.getLastUpdateDate();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ObjectVersionId {
            public Object get(AddressesEOImpl obj) {
                return obj.getObjectVersionId();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrdersEO {
            public Object get(AddressesEOImpl obj) {
                return obj.getOrdersEO();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PersonsEO {
            public Object get(AddressesEOImpl obj) {
                return obj.getPersonsEO();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        AddressUsagesEO {
            public Object get(AddressesEOImpl obj) {
                return obj.getAddressUsagesEO();
            }

            public void put(AddressesEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(AddressesEOImpl object);

        public abstract void put(AddressesEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    private static AddressesEODefImpl mDefinitionObject;
    public static final int ADDRESSID = AttributesEnum.AddressId.index();
    public static final int ADDRESS1 = AttributesEnum.Address1.index();
    public static final int ADDRESS2 = AttributesEnum.Address2.index();
    public static final int CITY = AttributesEnum.City.index();
    public static final int POSTALCODE = AttributesEnum.PostalCode.index();
    public static final int STATEPROVINCE = AttributesEnum.StateProvince.index();
    public static final int COUNTRYID = AttributesEnum.CountryId.index();
    public static final int LONGITUDE = AttributesEnum.Longitude.index();
    public static final int LATITUDE = AttributesEnum.Latitude.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int LASTUPDATEDBY = AttributesEnum.LastUpdatedBy.index();
    public static final int LASTUPDATEDATE = AttributesEnum.LastUpdateDate.index();
    public static final int OBJECTVERSIONID = AttributesEnum.ObjectVersionId.index();
    public static final int ORDERSEO = AttributesEnum.OrdersEO.index();
    public static final int PERSONSEO = AttributesEnum.PersonsEO.index();
    public static final int ADDRESSUSAGESEO = AttributesEnum.AddressUsagesEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AddressesEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = (AddressesEODefImpl)EntityDefImpl.findDefObject("model.mwgl.eo.AddressesEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for AddressId, using the alias name AddressId.
     * @return the AddressId
     */
    public DBSequence getAddressId() {
        return (DBSequence)getAttributeInternal(ADDRESSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AddressId.
     * @param value value to set the AddressId
     */
    public void setAddressId(DBSequence value) {
        setAttributeInternal(ADDRESSID, value);
    }

    /**
     * Gets the attribute value for Address1, using the alias name Address1.
     * @return the Address1
     */
    public String getAddress1() {
        return (String)getAttributeInternal(ADDRESS1);
    }

    /**
     * Sets <code>value</code> as the attribute value for Address1.
     * @param value value to set the Address1
     */
    public void setAddress1(String value) {
        setAttributeInternal(ADDRESS1, value);
    }

    /**
     * Gets the attribute value for Address2, using the alias name Address2.
     * @return the Address2
     */
    public String getAddress2() {
        return (String)getAttributeInternal(ADDRESS2);
    }

    /**
     * Sets <code>value</code> as the attribute value for Address2.
     * @param value value to set the Address2
     */
    public void setAddress2(String value) {
        setAttributeInternal(ADDRESS2, value);
    }

    /**
     * Gets the attribute value for City, using the alias name City.
     * @return the City
     */
    public String getCity() {
        return (String)getAttributeInternal(CITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for City.
     * @param value value to set the City
     */
    public void setCity(String value) {
        setAttributeInternal(CITY, value);
    }

    /**
     * Gets the attribute value for PostalCode, using the alias name PostalCode.
     * @return the PostalCode
     */
    public String getPostalCode() {
        return (String)getAttributeInternal(POSTALCODE);
    }
    public void postChanges(TransactionEvent transactionEvent) {
        System.out.println("Time Passssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss");
        /* Only bother to update references if Address is a new one */
        if (this.getPostState() == STATUS_NEW) {
            newAddressBeforePost = (RowSet)this.getAddressUsagesEO();
        }
        super.postChanges(transactionEvent);
    }
    RowSet newAddressBeforePost = null;
    
    protected void refreshFKInNewContainees() {
        if (newAddressBeforePost != null) {
            Number newAddressId = getAddressId().getSequenceNumber();
            while (newAddressBeforePost.hasNext()) {
                AddressUsagesEOImpl usages = 
                    (AddressUsagesEOImpl)newAddressBeforePost.next();
                usages.setAddressId(newAddressId);
            }
            newAddressBeforePost.closeRowSetIterator(); 
        }
    }
    /**
     * Sets <code>value</code> as the attribute value for PostalCode.
     * @param value value to set the PostalCode
     */
    public void setPostalCode(String value) {
        setAttributeInternal(POSTALCODE, value);
    }

    /**
     * Gets the attribute value for StateProvince, using the alias name StateProvince.
     * @return the StateProvince
     */
    public String getStateProvince() {
        return (String)getAttributeInternal(STATEPROVINCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StateProvince.
     * @param value value to set the StateProvince
     */
    public void setStateProvince(String value) {
        setAttributeInternal(STATEPROVINCE, value);
    }

    /**
     * Gets the attribute value for CountryId, using the alias name CountryId.
     * @return the CountryId
     */
    public String getCountryId() {
        return (String)getAttributeInternal(COUNTRYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CountryId.
     * @param value value to set the CountryId
     */
    public void setCountryId(String value) {
        setAttributeInternal(COUNTRYID, value);
    }

    /**
     * Gets the attribute value for Longitude, using the alias name Longitude.
     * @return the Longitude
     */
    public Number getLongitude() {
        return (Number)getAttributeInternal(LONGITUDE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Longitude.
     * @param value value to set the Longitude
     */
    public void setLongitude(Number value) {
        setAttributeInternal(LONGITUDE, value);
    }

    /**
     * Gets the attribute value for Latitude, using the alias name Latitude.
     * @return the Latitude
     */
    public Number getLatitude() {
        return (Number)getAttributeInternal(LATITUDE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Latitude.
     * @param value value to set the Latitude
     */
    public void setLatitude(Number value) {
        setAttributeInternal(LATITUDE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the CreatedBy
     */
    public String getCreatedBy() {
        return (String)getAttributeInternal(CREATEDBY);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the CreationDate
     */
    public Date getCreationDate() {
        return (Date)getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for LastUpdatedBy, using the alias name LastUpdatedBy.
     * @return the LastUpdatedBy
     */
    public String getLastUpdatedBy() {
        return (String)getAttributeInternal(LASTUPDATEDBY);
    }

    /**
     * Gets the attribute value for LastUpdateDate, using the alias name LastUpdateDate.
     * @return the LastUpdateDate
     */
    public Date getLastUpdateDate() {
        return (Date)getAttributeInternal(LASTUPDATEDATE);
    }

    /**
     * Gets the attribute value for ObjectVersionId, using the alias name ObjectVersionId.
     * @return the ObjectVersionId
     */
    public Number getObjectVersionId() {
        return (Number)getAttributeInternal(OBJECTVERSIONID);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getOrdersEO() {
        return (RowIterator)getAttributeInternal(ORDERSEO);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getPersonsEO() {
        return (RowIterator)getAttributeInternal(PERSONSEO);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAddressUsagesEO() {
        return (RowIterator)getAttributeInternal(ADDRESSUSAGESEO);
    }


    /**
     * @param addressId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(DBSequence addressId) {
        return new Key(new Object[]{addressId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    public void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
