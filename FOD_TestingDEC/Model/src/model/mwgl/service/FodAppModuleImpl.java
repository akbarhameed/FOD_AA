package model.mwgl.service;

import java.util.Date;


import model.mwgl.service.common.FodAppModule;

import model.mwgl.vo.AddressAndUsageVOImpl;

import oracle.jbo.domain.Number;

import model.mwgl.vo.OrdersVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 18 15:58:19 IST 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FodAppModuleImpl extends ApplicationModuleImpl implements FodAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public FodAppModuleImpl() {
    }

    /**
     * Container's getter for PersonsVO.
     * @return PersonsVO
     */
    public ViewObjectImpl getPersonsVO() {
        return (ViewObjectImpl)findViewObject("PersonsVO");
    }

    /**
     * Container's getter for OrdersVO.
     * @return OrdersVO
     */
    public OrdersVOImpl getOrdersVO() {
        return (OrdersVOImpl)findViewObject("OrdersVO");
    }

    /**
     * Container's getter for AddressesVO.
     * @return AddressesVO
     */
    public ViewObjectImpl getAddressesVO() {
        return (ViewObjectImpl)findViewObject("AddressesVO");
    }

    /**
     * Container's getter for PaymentOptionsVO.
     * @return PaymentOptionsVO
     */
    public ViewObjectImpl getPaymentOptionsVO() {
        return (ViewObjectImpl)findViewObject("PaymentOptionsVO");
    }

    /**
     * Container's getter for OrderItemsVO.
     * @return OrderItemsVO
     */
    public ViewObjectImpl getOrderItemsVO() {
        return (ViewObjectImpl)findViewObject("OrderItemsVO");
    }

    /**
     * Container's getter for PaymentOptionsVO1.
     * @return PaymentOptionsVO1
     */
    public ViewObjectImpl getPaymentOptionsVO1() {
        return (ViewObjectImpl)findViewObject("PaymentOptionsVO1");
    }

    /**
     * Container's getter for AddressesVO1.
     * @return AddressesVO1
     */
    public ViewObjectImpl getAddressesVO1() {
        return (ViewObjectImpl)findViewObject("AddressesVO1");
    }

    /**
     * Container's getter for ShoppingCartTransientView1.
     * @return ShoppingCartTransientView1
     */
    public ViewObjectImpl getShoppingCartTransientView1() {
        return (ViewObjectImpl)findViewObject("ShoppingCartTransientView1");
    }

    /**
     * Container's getter for OrdersPersonsFkLink1.
     * @return OrdersPersonsFkLink1
     */
    public ViewLinkImpl getOrdersPersonsFkLink1() {
        return (ViewLinkImpl)findViewLink("OrdersPersonsFkLink1");
    }

    /**
     * Container's getter for Oreder_Address1.
     * @return Oreder_Address1
     */
    public ViewLinkImpl getOreder_Address1() {
        return (ViewLinkImpl)findViewLink("Oreder_Address1");
    }

    /**
     * Container's getter for Order_PatmentsLink1.
     * @return Order_PatmentsLink1
     */
    public ViewLinkImpl getOrder_PatmentsLink1() {
        return (ViewLinkImpl)findViewLink("Order_PatmentsLink1");
    }

    /**
     * Container's getter for OrderItemsOrdersFkLink1.
     * @return OrderItemsOrdersFkLink1
     */
    public ViewLinkImpl getOrderItemsOrdersFkLink1() {
        return (ViewLinkImpl)findViewLink("OrderItemsOrdersFkLink1");
    }

    /**
     * Container's getter for Payment_Address_Link1.
     * @return Payment_Address_Link1
     */
    public ViewLinkImpl getPayment_Address_Link1() {
        return (ViewLinkImpl)findViewLink("Payment_Address_Link1");
    }
    
    public String addItemInTransientVO(Number productID)throws JboException{
            System.out.println("Entering into addItemInTransientVO()");
                        ViewObjectImpl cartTransientVO = this.getShoppingCartTransientView1();
                    Row criteria = this.getProductIdViewCriteria(productID);
                    
                    // from here we changing.
                        Row[] transientVORows = cartTransientVO.findByKey( new Key(new Object[]{productID}) ,1);
                             System.out.println("No of Transient Rows:"+transientVORows.length);
                             
                             
                        if(transientVORows.length>0){

                                   Integer currentQuantity = (Integer)transientVORows[0].getAttribute("Quantity");
                                   currentQuantity=currentQuantity+1;                       
                                   transientVORows[0].setAttribute("Quantity",currentQuantity);
                                   System.out.println("calculatedQuantity:"+currentQuantity);

                               }else{
                            
                            
                    
                    
                    if(criteria!=null){
                    Row createRow = cartTransientVO.createRow();
                        createRow.setAttribute("ProductId", productID);
                        createRow.setAttribute("ProductName", criteria.getAttribute("ProductName"));
                        createRow.setAttribute("Quantity", 1);
                        createRow.setAttribute("ListPrice", criteria.getAttribute("ListPrice"));
                        cartTransientVO.insertRow(createRow);
                        
                        } else {
                            throw new JboException( "You Entered Product ID" + productID+ "Is Not There In Data Base Please Enter Valid Product ID" );         
                        }
                        
                        System.out.println("Leaving from addItemInTransientVO()");
                               }
                        return "";
        }
    

    /**
     * Container's getter for ProductsBaseVO1.
     * @return ProductsBaseVO1
     */
    public ViewObjectImpl getProductsBaseVO1() {
        return (ViewObjectImpl)findViewObject("ProductsBaseVO1");
    }
    
    
    public Row getProductIdViewCriteria(Number productID){
            //getting the view object
            ViewObjectImpl productVO = this.getProductsBaseVO1();
            //create view criteria programatically
            ViewCriteria productsVC = productVO.createViewCriteria();
            //create view criteria row
            ViewCriteriaRow productsVCR = productsVC.createViewCriteriaRow();
            //adding Product ID to view criteria row
            productsVCR.setAttribute("ProductId", "=" + productID);
            //adding above product Id into view criteria row
            productsVC.addElement(productsVCR);
            //Finding above view criteria by scanning database tables
            RowIterator productsItr =
            productVO.findByViewCriteria(productsVC, -1, ViewObject.QUERY_MODE_SCAN_DATABASE_TABLES);  
            //getting the first row
           return productsItr.first();
        }  
    
    public void removeItemFromCart(Number productId)throws JboException{
            System.out.println("Entering into removeItemFromCart()");
                       //getting the Transient View object
                       ViewObjectImpl cartTransientVO = this.getShoppingCartTransientView1();
                       //getting the row by passing product ID
                       Row[] transientVORows = cartTransientVO.findByKey( new Key(new Object[]{productId}) ,1);
                       //checking the no of rows
                       if(transientVORows.length>0){
                       //removing row
                           transientVORows[0].remove();
                       }else{
                           //if rows not availbel showing message to the user
                           throw new JboException("Product ID#:"+productId+" is not available in Shopping Cart."); 
                       }
                       ViewObjectImpl orderitemsVO = this.getOrderItemsVO();
                       ViewCriteria vc = orderitemsVO.createViewCriteria();
                              ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
                              vcRow.setAttribute("ProductId", productId );
                              vc.addRow(vcRow);
                              orderitemsVO.applyViewCriteria(vc);
                              orderitemsVO.executeQuery();
                       orderitemsVO.first().remove();
                       orderitemsVO.clearViewCriterias();
                       orderitemsVO.executeQuery();
                   System.out.println("Leaving from removeItemFromCart()");
                   
        }
    
    public void removeAllItemsFromCart(){
            OrdersVOImpl ordersvo = this.getOrdersVO();
                    ViewObjectImpl orderitemsVO = this.getOrderItemsVO();
                    System.out.println("Entering into removeAllItemsFromCart()");
                    //getting the view object
                    ViewObjectImpl cartTransientVO = this.getShoppingCartTransientView1();
                    //setting range size to -1 to get all rows of the shopping cart
                    cartTransientVO.setRangeSize(-1);
                    //get all rows 
                    Row[] allRowsInRange = cartTransientVO.getAllRowsInRange();
                    //for each to iterate all rows
                    for (Row row : allRowsInRange) {
                        //remove row
                        row.remove();
                    }
                  System.out.println("Leaving from removeAllItemsFromCart()");
                    System.out.println("Leaving from removeAllItemsFromCart()");       
                    Row currentRow = ordersvo.getCurrentRow();
                    Object attribute = currentRow.getAttribute("OrderId");
                    System.out.println("#####################"+attribute);

                    ViewCriteria vc = orderitemsVO.createViewCriteria();
                           ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
                           vcRow.setAttribute("OrderId", attribute );
                           vc.addRow(vcRow);
                           orderitemsVO.applyViewCriteria(vc);
                           orderitemsVO.executeQuery();
                    RowSetIterator createRowSetIterator = orderitemsVO.createRowSetIterator(null);
                    while(createRowSetIterator.hasNext()){
                        Row row = createRowSetIterator.next();
                        System.out.println("#####################"+row.getAttribute("ProductId"));       
                            row.remove();
                        
                       
                    }

        }
    
    
    public String createNewOrder(){        
            System.out.println("Entering into createNewOrder()");

        OrdersVOImpl ordersVO = this.getOrdersVO();
        
            Row createRow = ordersVO.createRow();
            createRow.setAttribute("OrderStatusCode", "CART");       
            createRow.setAttribute("DiscountId", new Number(1));
            createRow.setAttribute("CouponId", new Number(1));
            createRow.setAttribute("GiftwrapFlag", 'Y');  
            
            createRow.setAttribute("OrderDate", new Date());       
            createRow.setAttribute("OrderTotal", new Number(2000));
            createRow.setAttribute("CustomerId", new Number(108));
            createRow.setAttribute("ShipToAddressId", new Number(3));
            createRow.setAttribute("ShippingOptionId", new Number(1));
            createRow.setAttribute("FreeShippingFlag", "Y"); 
            createRow.setAttribute("CustomerCollectFlag", "Y"); 
            
            ordersVO.insertRow(createRow);
            this.getDBTransaction().commit();
            //getting the Order Itmes VO
        Row currentRow = ordersVO.getCurrentRow();
        String attribute = currentRow.getAttribute("OrderId").toString();
        return attribute;
    }
    
    public void createOrderItems(Number productID){
         System.out.println("++++++++_____)))))))))))))))(((((((((((("+productID);
         ViewObjectImpl orderItemsVO = this.getOrderItemsVO();
         ViewCriteria vc = orderItemsVO.createViewCriteria();
                ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
                vcRow.setAttribute("ProductId", productID );
                vc.addRow(vcRow);
                orderItemsVO.applyViewCriteria(vc);
                orderItemsVO.executeQuery();
    //        ViewCriteria criteria = orderItemsVO.getViewCriteria("OrderItemsVOCriteria");
    //        orderItemsVO.setNamedWhereClauseParam("prodId", productID);
    //        orderItemsVO.applyViewCriteria(criteria);
    //        orderItemsVO.executeQuery();
    //        Row[] transientVORows = orderItemsVO.findByKey( new Key(new Object[]{productID}) ,1);
         System.out.println("----------------------------------"+orderItemsVO.getEstimatedRowCount());
         Row[] allRowsInRange = orderItemsVO.getAllRowsInRange();
         System.out.println("+++++++++++++++++++++++++++++++++++++++++++"+allRowsInRange.length);
         if(allRowsInRange.length>0){
             System.out.println("print attrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"+orderItemsVO.first().getAttribute("ProductId"));
             Integer currentQuantity = (Integer)allRowsInRange[0].getAttribute("Quantity");
             currentQuantity=currentQuantity+1;                       
             allRowsInRange[0].setAttribute("Quantity",currentQuantity);
             System.out.println("calculatedQuantity:"+currentQuantity);
         }else{
                //getting the Orders VO
                ViewObjectImpl orderVO = this.getOrdersVO();
         // ViewObjectImpl impl = this.getOrderItemsVO();
         //getting the current row from Order VO
                Row ordersCurrentRow = orderVO.getCurrentRow();
                //getting the shopping cart transient VO
                ViewObjectImpl shoppingCartVO = this.getShoppingCartTransientView1();
                //getting all shopping cart rows
                Row shoppingCartRow = shoppingCartVO.getCurrentRow();
                //Iterating all shopping cart rows
         //               for (Row shoppingCartRow : allShoppingCartRows) {
                    //crate new order Item row
                    Row newOrderItemsRow = orderItemsVO.createRow();
                    //setting the attributes in Order itmes row
                    newOrderItemsRow.setAttribute("OrderId", ordersCurrentRow.getAttribute("OrderId"));
                    newOrderItemsRow.setAttribute("ProductId", shoppingCartRow.getAttribute("ProductId"));
                    newOrderItemsRow.setAttribute("Quantity", shoppingCartRow.getAttribute("Quantity"));
                    newOrderItemsRow.setAttribute("UnitPrice", shoppingCartRow.getAttribute("ListPrice"));
                    //Insert row in Order Itemes 
                    orderItemsVO.insertRow(newOrderItemsRow);
         //               }
                //Saving the changes
         }
                this.getDBTransaction().commit();
         orderItemsVO.clearViewCriterias();
         orderItemsVO.executeQuery();
     
     }


    public void userRegistrationCreateAddress(){
        ViewObject userVO = this.getPersonsVO();
        ViewObject addressVO = this.getAddressAndUsageVO1();
        if (addressVO.getRowCount() == 0){
           Row currentRow = addressVO.createRow();
           addressVO.insertRow(currentRow);  
        }     
        else {   
            Row currentRow = addressVO.createRow();   
            addressVO.insertRow(currentRow);        
        }
    }
    public void userRegistrationCreate(){        
        ViewObject userVO = this.getPersonsVO();
        Row currentRow = userVO.createRow();
        currentRow.setAttribute("PersonTypeCode","STAFF");
        userVO.insertRow(currentRow);       
    }

    /**
     * Container's getter for AddressAndUsageVO1.
     * @return AddressAndUsageVO1
     */
    public ViewObjectImpl getAddressAndUsageVO1() {
        return (ViewObjectImpl)findViewObject("AddressAndUsageVO1");
    }

    /**
     * Container's getter for PersonsToAddressesAndUsagesLink1.
     * @return PersonsToAddressesAndUsagesLink1
     */
    public ViewLinkImpl getPersonsToAddressesAndUsagesLink1() {
        return (ViewLinkImpl)findViewLink("PersonsToAddressesAndUsagesLink1");
    }

    /**
     * Container's getter for FindByOrderIdView1.
     * @return FindByOrderIdView1
     */
    public ViewObjectImpl getFindByOrderIdView1() {
        return (ViewObjectImpl)findViewObject("FindByOrderIdView1");
    }

    /**
     * Container's getter for FindAddressesByIdView1.
     * @return FindAddressesByIdView1
     */
    public ViewObjectImpl getFindAddressesByIdView1() {
        return (ViewObjectImpl)findViewObject("FindAddressesByIdView1");
    }

    /**
     * Container's getter for PaymentOptionsForUser.
     * @return PaymentOptionsForUser
     */
    public ViewObjectImpl getPaymentOptionsForUser() {
        return (ViewObjectImpl)findViewObject("PaymentOptionsForUser");
    }

    /**
     * Container's getter for PersonsToPaymentOptions1.
     * @return PersonsToPaymentOptions1
     */
    public ViewLinkImpl getPersonsToPaymentOptions1() {
        return (ViewLinkImpl)findViewLink("PersonsToPaymentOptions1");
    }


    /**
     * Container's getter for CustomerRegistrastionVO.
     * @return CustomerRegistrastionVO
     */
    public ViewObjectImpl getCustomerRegistrastionVO() {
        return (ViewObjectImpl)findViewObject("CustomerRegistrastionVO");
    }

    /**
     * Container's getter for CustomerAddressVO.
     * @return CustomerAddressVO
     */
    public AddressAndUsageVOImpl getCustomerAddressVO() {
        return (AddressAndUsageVOImpl)findViewObject("CustomerAddressVO");
    }

    /**
     * Container's getter for PersonsToAddressesAndUsagesLink2.
     * @return PersonsToAddressesAndUsagesLink2
     */
    public ViewLinkImpl getPersonsToAddressesAndUsagesLink2() {
        return (ViewLinkImpl)findViewLink("PersonsToAddressesAndUsagesLink2");
    }
}
